// WOULD LOVE TO USE, BUT SCSS HAS VARIABLE ISSUES (Issue found when using variable at beginning of name)
// $fs-container-tags: (
//   'grid' : 'grid',
//   'flex' : 'flex',
// );
$fs-flex-container-flex-wrap: (
  'wrap'         : 'wrap',
  'wrap-reverse' : 'wrap-reverse',
);

@mixin container(
  $height : auto,
  $width  : auto,
  $margin : auto,
  ){
  @include grid-pos(1);
  min-height  : $height;
  width   : $width;
  margin  : $margin;
}

@mixin auto-grid-tag-class-generator($key, $value){
  // @each $keyContainer, $valueContainer in $fs-container-tags{
    // Grid
      grid-#{$key},
      .grid-#{$key} {
        @include grid-container();
        @include container();

        @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
          $valueLight : map-get($value, 'light');
          $valueDark  : map-get($value, 'dark');

          @include light-theme{ background-color: $valueLight; }
          @include dark-theme { background-color: $valueDark;  }
        }
        @else{
          background-color: $value;
        }
      }
      grid-container-#{$key},
      .grid-container-#{$key} {
        @include grid-container();
        @include container(100vh, 100vw);
        
        @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
          $valueLight : map-get($value, 'light');
          $valueDark  : map-get($value, 'dark');

          @include light-theme{ background-color: $valueLight; }
          @include dark-theme { background-color: $valueDark;  }
        }
        @else{
          background-color: $value;
        }
      }
    // Grid
      
    // Flex
      // Defaults
        flex-#{$key},
        .flex-#{$key} {
          @include flex-container();
          @include container();

          @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
            $valueLight : map-get($value, 'light');
            $valueDark  : map-get($value, 'dark');

            @include light-theme{ background-color: $valueLight; }
            @include dark-theme { background-color: $valueDark;  }
          }
          @else{
            background-color: $value;
          }
        }
        flex-container-#{$key},
        .flex-container-#{$key} {
          @include flex-container();
          @include container(100vh, 100vw);
          
          @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
            $valueLight : map-get($value, 'light');
            $valueDark  : map-get($value, 'dark');

            @include light-theme{ background-color: $valueLight; }
            @include dark-theme { background-color: $valueDark;  }
          }
          @else{
            background-color: $value;
          }
        }
      // Defaults
      
      // Flex Wrap
        @each $keyFlexWrap, $valueFlexWrap in $fs-flex-container-flex-wrap{
          flex-#{$keyFlexWrap}-#{$key},
          .flex-#{$keyFlexWrap}-#{$key} {
            @include flex-container();
            @include container();

            @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
              $valueLight : map-get($value, 'light');
              $valueDark  : map-get($value, 'dark');

              @include light-theme{ background-color: $valueLight; }
              @include dark-theme { background-color: $valueDark;  }
            }
            @else{
              background-color: $value;
            }
          }
          flex-container-#{$keyFlexWrap}-#{$key},
          .flex-container-#{$keyFlexWrap}-#{$key} {
            @include flex-container();
            @include container(100vh, 100vw);
            
            @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
              $valueLight : map-get($value, 'light');
              $valueDark  : map-get($value, 'dark');

              @include light-theme{ background-color: $valueLight; }
              @include dark-theme { background-color: $valueDark;  }
            }
            @else{
              background-color: $value;
            }
          }
        }
      // Flex Wrap
    // Flex
  // }
}

// Default Tags
  grid,
  .grid {
    @include grid-container();
    @include container();
  }
  grid-container,
  .grid-container {
    @include grid-container();
    @include container(100vh, 100vw);
  }
  flex ,
  .flex {
    @include flex-container();
    @include container();
  }
  flex-wrap,
  .flex-wrap {
    @include flex-container();
    @include container();
    flex-wrap: wrap;
  }
  flex-container,
  .flex-container {
    @include flex-container();
    @include container(100vh, 100vw);
  }
  flex-container-wrap,
  .flex-container-wrap {
    @include flex-container();
    @include container(100vh, 100vw);
    flex-wrap: wrap;
  }
// Default Tags

@each $key, $value in $auto-class-generator-merge{ @include auto-grid-tag-class-generator($key, $value); }