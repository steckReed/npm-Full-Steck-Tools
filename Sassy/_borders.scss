$fs-border-tags: (
  'dotted' : dotted,
  'dashed' : dashed,
  'solid'  : solid,
  'double' : double,
  'groove' : groove,
  'ridge'  : ridge,
  'inset'  : inset,
  'outset' : outset,
  'none'   : none,
  'hidden' : hidden
);

// Mixins
  @mixin border-style(
      $border-size    : 6px, 
      $border-style   : dotted, 
      $border-color   :black, 
      $border-radius  : 1rem,
      $transition     : 250ms
    ){ 
    border:$border-size $border-style $border-color; 
    border-radius: $border-radius;
    transition: $transition;
  }

  @mixin dotted(
      $border-size    : 6px, 
      $border-style   : dotted, 
      $border-color   :black, 
      $border-radius  : 1rem,
      $transition     : 250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin dashed(
      $border-size:   6px, 
      $border-style:  dashed, 
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin solid (
      $border-size:   6px, 
      $border-style:  solid,  
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin double(
      $border-size:   6px, 
      $border-style:  double, 
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin groove(
      $border-size:   6px, 
      $border-style:  groove, 
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin ridge (
      $border-size:   6px, 
      $border-style:  ridge,  
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin inset (
      $border-size:   6px, 
      $border-style:  inset,  
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin outset(
      $border-size:   6px, 
      $border-style:  outset, 
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin none  (
      $border-size:   6px, 
      $border-style:  none,   
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  @mixin hidden(
      $border-size:   6px, 
      $border-style:  hidden, 
      $border-color:black, 
      $border-radius: 1rem,
      $transition:    250ms
    ){ 
      border:$border-size $border-style $border-color; 
      border-radius: $border-radius;
      transition: $transition;
  }
  
  @mixin auto-border-class-generator($key, $value){
    @each $keyBorder, $valueBorder in $fs-border-tags{
      .border-#{$keyBorder}-#{$key}{

        @if(varIs($value, 'map') and ( map-has-key($value, 'light') and map-has-key($value, 'dark') )){ 
          $valueLight : map-get($value, 'light');
          $valueDark  : map-get($value, 'dark');

          @include light-theme{
            @include border-style(6px, $valueBorder, $valueLight, 1rem, 250ms);
          }
          @include dark-theme{
            @include border-style(6px, $valueBorder, $valueDark, 1rem, 250ms);
          }
        }
        @else{
            @include border-style(6px, $valueBorder, $value, 1rem, 250ms);
        }
        
      }
    }
  }
// Mixins

// Auto-Generated Classes
@each $key, $value in $auto-class-generator-merge{ @include auto-border-class-generator($key, $value); }

// Classes
  .dotted{ @include dotted(); }
  .dashed{ @include dashed(); }
  .solid { @include solid (); }
  .double{ @include double(); }
  .groove{ @include groove(); }
  .ridge { @include ridge (); }
  .inset { @include inset (); }
  .outset{ @include outset(); }
  .none  { @include none  (); }
  .hidden{ @include hidden(); }
// Classes